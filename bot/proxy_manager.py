from sqlalchemy.future import select
from db.models import ProxySettings
from db.sessions import get_db

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import aiohttp
from aiohttp_socks import ProxyConnector

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProxyStates(StatesGroup):
    waiting_for_proxy_data = State()
    waiting_for_proxy_deletion_id = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_ACTION_BUTTONS = [
    "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é",
    "üìÇ –ú–æ–∏ —Å–µ—Å—Å–∏–∏",
    "üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É",
    "üö´ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã",
    "üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
    "üì® –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
    "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
    "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"
]

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë• –°–µ—Å—Å–∏–∏")],[KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É"), KeyboardButton(text="üö´ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")],
        [KeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton(text="üì® –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),KeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")]
    ],
    resize_keyboard=True
)

@router.message(F.text == "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
async def manage_proxy(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏")],
            [KeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∫—Å–∏")],
            [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await state.clear()
    await message.answer("üåê –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:", reply_markup=keyboard)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
async def add_proxy(message: types.Message, state: FSMContext):
    await state.set_state(ProxyStates.waiting_for_proxy_data)
    await message.answer(
        "üîå –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>—Ç–∏–ø:ip:port:–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>socks5:127.0.0.1:1080:user:pass</code>\n"
        "–ï—Å–ª–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Ç–∏–ø:ip:port</code>",
        parse_mode="HTML"
    )



@router.message(StateFilter(ProxyStates.waiting_for_proxy_data))
async def save_proxy(message: types.Message, state: FSMContext):
    parts = message.text.strip().split(":")
    if len(parts) not in [3, 5]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Ç–∏–ø:ip:port:–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</code>", parse_mode="HTML")
        return

    proxy_type, host, port = parts[0], parts[1], int(parts[2])
    login = parts[3] if len(parts) == 5 else None
    password = parts[4] if len(parts) == 5 else None

    if proxy_type not in ["socks5", "socks4", "http"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: socks5, socks4, http")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–∫—Å–∏ –≤ –ë–î
    async for db in get_db():
        existing_proxy = await db.execute(
            select(ProxySettings).where(
                ProxySettings.user_id == message.from_user.id,
                ProxySettings.proxy_type == proxy_type,
                ProxySettings.proxy_host == host,
                ProxySettings.proxy_port == port,
                ProxySettings.proxy_login == login,
                ProxySettings.proxy_password == password
            )
        )
        existing_proxy = existing_proxy.scalars().first()

        if existing_proxy:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –ø—Ä–æ–∫—Å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    try:
        url = f"{proxy_type}://{login}:{password}@{host}:{port}" if login else f"{proxy_type}://{host}:{port}"
        connector = ProxyConnector.from_url(url)
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.get("http://example.com", timeout=aiohttp.ClientTimeout(total=7)):
                pass
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: `{e}`", parse_mode="Markdown")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    async for db in get_db():
        db.add(ProxySettings(
            user_id=message.from_user.id,
            proxy_type=proxy_type,
            proxy_host=host,
            proxy_port=port,
            proxy_login=login,
            proxy_password=password
        ))
        await db.commit()

    await state.clear()
    await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–∫—Å–∏
@router.message(F.text == "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∫—Å–∏")
async def list_proxies(message: types.Message, state: FSMContext):
    async for db in get_db():
        proxies = await db.execute(
            select(ProxySettings).where(ProxySettings.user_id == message.from_user.id)
        )
        proxies = proxies.scalars().all()

    if not proxies:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")
        return

    text = "üåê –í–∞—à–∏ –ø—Ä–æ–∫—Å–∏:\n\n"
    for proxy in proxies:
        auth = f"{proxy.proxy_login}:{proxy.proxy_password}@" if proxy.proxy_login else ""
        text += f"{proxy.proxy_type}://{auth}{proxy.proxy_host}:{proxy.proxy_port}\n"
    await message.answer(text)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
async def delete_proxy_prompt(message: types.Message, state: FSMContext):
    async for db in get_db():
        proxies = await db.execute(
            select(ProxySettings).where(ProxySettings.user_id == message.from_user.id)
        )
        proxies = proxies.scalars().all()

    if not proxies:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")
        return

    buttons_per_page = 5
    page = 0
    await state.update_data(proxy_page=page, proxy_ids=[p.id for p in proxies])

    def get_markup(page, proxies_list):
        start = page * buttons_per_page
        end = start + buttons_per_page
        current_proxies = proxies_list[start:end]

        inline_keyboard = [
            [InlineKeyboardButton(
                text=f"üÜó {p.proxy_type}://{p.proxy_host}:{p.proxy_port}",
                callback_data=f"delete_proxy:{p.id}")]
            for p in current_proxies
        ]

        navigation = []
        total_pages = (len(proxies_list) - 1) // buttons_per_page + 1
        if page > 0:
            navigation.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="proxy_prev"))
        if end < len(proxies_list):
            navigation.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="proxy_next"))
        if navigation:
            inline_keyboard.append(navigation)

        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard), total_pages

    markup, total_pages = get_markup(page, proxies)
    await state.set_state(ProxyStates.waiting_for_proxy_deletion_id)
    await message.answer(
        f"üßπ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_proxy:"))
async def process_proxy_deletion(callback: types.CallbackQuery, state: FSMContext):
    proxy_id = int(callback.data.split(":")[1])
    async for db in get_db():
        proxy = await db.execute(
            select(ProxySettings).where(
                ProxySettings.user_id == callback.from_user.id,
                ProxySettings.id == proxy_id
            )
        )
        proxy = proxy.scalars().first()
        if not proxy:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∫—Å–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await db.delete(proxy)
        await db.commit()

    await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Å ID {proxy_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.in_(["proxy_prev", "proxy_next"]))
async def process_pagination(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get("proxy_page", 0)
    proxy_ids = data.get("proxy_ids", [])

    if callback.data == "proxy_prev" and page > 0:
        page -= 1
    elif callback.data == "proxy_next":
        page += 1

    await state.update_data(proxy_page=page)

    async for db in get_db():
        proxies = await db.execute(
            select(ProxySettings).where(ProxySettings.id.in_(proxy_ids))
        )
        proxies = proxies.scalars().all()

    def get_markup(page, proxies_list):
        start = page * buttons_per_page
        end = start + buttons_per_page
        current_proxies = proxies_list[start:end]

        inline_keyboard = [
            [InlineKeyboardButton(
                text=f"üÜó {p.proxy_type}://{p.proxy_host}:{p.proxy_port}",
                callback_data=f"delete_proxy:{p.id}")]
            for p in current_proxies
        ]

        navigation = []
        total_pages = (len(proxies_list) - 1) // buttons_per_page + 1
        if page > 0:
            navigation.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="proxy_prev"))
        if end < len(proxies_list):
            navigation.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="proxy_next"))
        if navigation:
            inline_keyboard.append(navigation)

        return InlineKeyboardMarkup(inline_keyboard=inline_keyboard), total_pages

    buttons_per_page = 5
    markup, total_pages = get_markup(page, proxies)
    await callback.message.edit_text(
        f"üßπ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):",
        reply_markup=markup
    )
    await callback.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏")
async def check_all_proxies(message: types.Message, state: FSMContext):
    async for db in get_db():
        proxies = await db.execute(
            select(ProxySettings).where(ProxySettings.user_id == message.from_user.id)
        )
        proxies = proxies.scalars().all()

    if not proxies:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")
        return

    await message.answer("üß™ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–∫—Å–∏... –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")

    working, broken = [], []

    for proxy in proxies:
        try:
            url = f"{proxy.proxy_type}://{proxy.proxy_login}:{proxy.proxy_password}@{proxy.proxy_host}:{proxy.proxy_port}" if proxy.proxy_login else f"{proxy.proxy_type}://{proxy.proxy_host}:{proxy.proxy_port}"
            connector = ProxyConnector.from_url(url)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get("http://example.com", timeout=aiohttp.ClientTimeout(total=7)):
                    working.append(proxy.id)
        except Exception:
            broken.append(proxy.id)

    if working:
        working_text = "\n".join(
            [f"üÜó ID {proxy.id}: {proxy.proxy_type}://{proxy.proxy_host}:{proxy.proxy_port}" for proxy in proxies if proxy.id in working]
        )
    else:
        working_text = "–Ω–µ—Ç"

    if broken:
        broken_text = "\n".join(
            [f"‚õîÔ∏è ID {proxy.id}: {proxy.proxy_type}://{proxy.proxy_host}:{proxy.proxy_port}" for proxy in proxies if proxy.id in broken]
        )
    else:
        broken_text = "–Ω–µ—Ç"

    summary = (
        "<b>üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n\n"
        f"<b>‚úÖ –†–∞–±–æ—á–∏–µ:</b>\n{working_text}\n\n"
        f"<b>‚ùå –ù–µ—Ä–∞–±–æ—á–∏–µ:</b>\n{broken_text}"
    )
    await message.answer(summary, parse_mode="HTML")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.message(StateFilter(ProxyStates.waiting_for_proxy_deletion_id))
async def delete_proxy_text(message: types.Message, state: FSMContext):
    try:
        proxy_text = message.text.strip()
        if not proxy_text.startswith("–£–¥–∞–ª–∏—Ç—å ID "):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å ID <–Ω–æ–º–µ—Ä>'.")
            return
        proxy_id = int(proxy_text.replace("–£–¥–∞–ª–∏—Ç—å ID ", ""))
        async for db in get_db():
            proxy = await db.execute(
                select(ProxySettings).where(
                    ProxySettings.user_id == message.from_user.id,
                    ProxySettings.id == proxy_id
                )
            )
            proxy = proxy.scalars().first()
            if not proxy:
                await message.answer("‚ùå –ü—Ä–æ–∫—Å–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            await db.delete(proxy)
            await db.commit()
            await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: `{e}`", parse_mode="Markdown")
    finally:
        await state.clear()