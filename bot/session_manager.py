import re
import os
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeExpiredError, FloodWaitError, PhoneNumberInvalidError, PhoneCodeInvalidError
from sqlalchemy import select
from db.sessions import get_db
from db.models import TelegramSession, User, ProxySettings
from bot.logger import logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

router = Router()
UPLOAD_PATH = "sessions/"
os.makedirs(UPLOAD_PATH, exist_ok=True)

class SessionStates(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

session_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")],
        [KeyboardButton(text="üîå –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏"), KeyboardButton(text="‚ùå –°–Ω—è—Ç—å –ø—Ä–æ–∫—Å–∏")],
        [KeyboardButton(text="üìÇ –ú–æ–∏ —Å–µ—Å—Å–∏–∏")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ ---
async def get_proxy_tuple(state: FSMContext, user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
    """
    async for db in get_db():
        result = await db.execute(
            select(ProxySettings).where(ProxySettings.user_id == user_id)
        )
        proxy = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

    if proxy:
        proxy_tuple = (
            proxy.proxy_type,  # –¢–∏–ø –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 'socks5'
            proxy.proxy_host,  # –•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏
            proxy.proxy_port,  # –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            proxy.proxy_login, # –õ–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            proxy.proxy_password  # –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        )
        return proxy_tuple
    else:
        return None  # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def get_user_proxies(user_id: int):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    async for db in get_db():
        result = await db.execute(select(ProxySettings).where(ProxySettings.user_id == user_id))
        proxies = result.scalars().all()
    return proxies

async def get_session_status(session_file: str, api_id: int, api_hash: str):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –ª–∏ –æ–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ """
    session_path = os.path.join(UPLOAD_PATH, session_file)
    client = TelegramClient(session_path, api_id, api_hash)
    
    try:
        await client.connect()
        if not await client.is_user_authorized():
            user_display = "üîí –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞"
        else:
            me = await client.get_me()
            user_display = (
                f"üë§ {me.first_name} {me.last_name or ''} (@{me.username})" if me.username else f"ID: {me.id}"
            )
        await client.disconnect()
        return user_display
    except SessionPasswordNeededError:
        return "üîí –°–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞: {str(e)}"

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ ---
# (–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è)

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ ---

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
async def request_api_id(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(SessionStates.waiting_for_api_id)
    await message.answer(
        "üìå –ü–æ–ª—É—á–∏—Ç—å API ID –∏ API HASH –º–æ–∂–Ω–æ —Ç—É—Ç:\n"
        "üîó [My Telegram Apps](https://my.telegram.org/apps)\n\n"
        "‚úè –í–≤–µ–¥–∏—Ç–µ API ID:",
        parse_mode="Markdown"
    )

@router.message(StateFilter(SessionStates.waiting_for_api_id))
async def get_api_id(message: types.Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è API_ID.")
        return
    await state.update_data(api_id=int(message.text.strip()))
    await state.set_state(SessionStates.waiting_for_api_hash)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ API HASH:")

@router.message(StateFilter(SessionStates.waiting_for_api_hash))
async def get_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(SessionStates.waiting_for_phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(StateFilter(SessionStates.waiting_for_phone))
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())

    async for db in get_db():
        result = await db.execute(select(ProxySettings).where(ProxySettings.user_id == message.from_user.id))
        proxies = result.scalars().all()

    if not proxies:
        await state.update_data(proxy="–Ω–µ—Ç")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
        # –í—ã–∑—ã–≤–∞–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
        await ask_code(message, state)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for proxy in proxies:
        auth = f"{proxy.proxy_login}:{proxy.proxy_password}@" if proxy.proxy_login else ""
        text = f"{proxy.proxy_type}://{auth}{proxy.proxy_host}:{proxy.proxy_port}"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"proxy_select:{proxy.id}"
            )
        ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–æ–∫—Å–∏", callback_data="proxy_select:–Ω–µ—Ç")
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏:", reply_markup=keyboard)
    await state.set_state(SessionStates.waiting_for_code)

# –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ (–±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞)
async def ask_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone = data["phone"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    proxy_id = data.get("proxy")

    session_path = os.path.join(UPLOAD_PATH, f"{phone.replace('+', '')}.session")
    proxy = None
    if proxy_id and proxy_id != "–Ω–µ—Ç":
        async for db in get_db():
            result = await db.execute(select(ProxySettings).where(ProxySettings.id == int(proxy_id)))
            proxy_obj = result.scalars().first()
        if proxy_obj:
            proxy = (
                'socks5',
                proxy_obj.proxy_host,
                int(proxy_obj.proxy_port),
                True if proxy_obj.proxy_login else False,
                str(proxy_obj.proxy_login or ''),
                str(proxy_obj.proxy_password or '')
            )

    client = TelegramClient(session_path, api_id, api_hash, proxy=proxy)
    await client.connect()
    try:
        code_request = await client.send_code_request(phone)
        await state.update_data(
            session=session_path,
            phone_code_hash=code_request.phone_code_hash,
            proxy_input=proxy_id
        )
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ waiting_for_code
        await state.set_state(SessionStates.waiting_for_code)
        await message.answer("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        await state.clear()
    finally:
        await client.disconnect()


@router.message(StateFilter(SessionStates.waiting_for_code))
async def verify_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    phone = data["phone"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    code = message.text.strip()
    session_path = data["session"]
    phone_code_hash = data["phone_code_hash"]
    proxy_id = data.get("proxy_input")

    proxy = None
    if proxy_id and proxy_id != "–Ω–µ—Ç":
        async for db in get_db():
            result = await db.execute(
                select(ProxySettings).where(ProxySettings.id == int(proxy_id))
            )
            proxy_obj = result.scalars().first()
        if proxy_obj:
            proxy = (
                'socks5',
                proxy_obj.proxy_host,
                int(proxy_obj.proxy_port),
                True if proxy_obj.proxy_login else False,
                str(proxy_obj.proxy_login or ''),
                str(proxy_obj.proxy_password or '')
            )

    client = TelegramClient(session_path, api_id, api_hash, proxy=proxy)
    await client.connect()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await client.is_user_authorized():
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
            return
        
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        me = await client.get_me()

        async for db in get_db():
            session_entry = TelegramSession(
                user_id=message.from_user.id,
                session_file=os.path.basename(session_path),
                api_id=api_id,
                api_hash=api_hash,
                proxy_id=int(proxy_id) if proxy_id and proxy_id != "–Ω–µ—Ç" else None
            )
            db.add(session_entry)
            await db.commit()

        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è @{me.username or me.first_name}")
        await state.clear()

    except SessionPasswordNeededError:
        await state.set_state(SessionStates.waiting_for_password)
        await message.answer("üîê –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    except PhoneCodeExpiredError:
        await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    except PhoneCodeInvalidError:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –Ω–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â—ë —Ä–∞–∑:")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()
    finally:
        if client.is_connected():
            await client.disconnect()

@router.message(StateFilter(SessionStates.waiting_for_password))
async def enter_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    session_path, api_id, api_hash, password = data["session"], data["api_id"], data["api_hash"], message.text.strip()
    
    client = TelegramClient(session_path, api_id, api_hash)
    await client.connect()
    try:
        await client.sign_in(password=password)
        me = await client.get_me()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è @{me.username or me.first_name}")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

async def list_sessions(message: types.Message):
    async for db in get_db():  
        result = await db.execute(
            select(TelegramSession).where(
                TelegramSession.user_id == message.from_user.id
            )
        )
        sessions = result.scalars().all()

    if not sessions:
        await message.answer(escape_md("*–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.*"), parse_mode="MarkdownV2")
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    text = escape_md("*–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:*\n\n")

    for session in sessions:
        session_path = f"sessions/{session.session_file}"
        user_display = "üîí _–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞_"

        try:
            client = TelegramClient(session_path, session.api_id, session.api_hash)
            await client.connect()

            if not await client.is_user_authorized():
                user_display = "üîí _–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞_"
            else:
                me = await client.get_me()
                first_name = escape_md(me.first_name)
                last_name = escape_md(me.last_name or "").strip()
                username = f"(@{escape_md(me.username)})" if me.username else f"*ID:* `{me.id}`"
                user_display = f"üë§ *{first_name}* {last_name} {username}".strip()
            await client.disconnect()
        except SessionPasswordNeededError:
            user_display = "üîí _–°–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é_"
        except Exception as e:
            user_display = f"‚ö† *–û—à–∏–±–∫–∞:* `{escape_md(str(e))}`"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Ç–µ–∫—Å—Ç
        text += f"{user_display}\n"

        buttons = [
            types.InlineKeyboardButton(
                text="–°–Ω—è—Ç—å –ø—Ä–æ–∫—Å–∏" if session.proxy_id else "–û–¥–µ—Ç—å –ø—Ä–æ–∫—Å–∏",
                callback_data=f"session_{'remove' if session.proxy_id else 'apply'}_proxy:{session.session_file}"
            ),
            types.InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_session:{session.session_file}",
            )
        ]
        keyboard.inline_keyboard.append(buttons)
        db.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await message.answer(escape_md(text), reply_markup=keyboard, parse_mode="MarkdownV2")

@router.message(F.text == "üìÇ –ú–æ–∏ —Å–µ—Å—Å–∏–∏")
async def handle_list_sessions(message: types.Message):
    await list_sessions(message)
    

@router.callback_query(lambda c: c.data.startswith("delete_session:"))
async def delete_session(callback: types.CallbackQuery):
    session_file = callback.data.split(":")[1]
    async for db in get_db():
        result = await db.execute(select(TelegramSession).where(
            TelegramSession.user_id == callback.from_user.id,
            TelegramSession.session_file == session_file
        ))
        session = result.scalars().first()
        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        await db.delete(session)
        await db.commit()
        path = f"sessions/{session_file}"
        if os.path.exists(path):
            os.remove(path)
    await callback.message.answer(f"‚úÖ –°–µ—Å—Å–∏—è {session_file} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()
    await db.close()


    await callback.answer()
@router.message(StateFilter(SessionStates.waiting_for_password))
async def verify_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    session_str = data["session"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone = data["phone"]
    proxy_id = data.get("proxy_input")
    password = message.text.strip()

    proxy = None
    if proxy_id and proxy_id != "–Ω–µ—Ç":
        async for db in get_db():
            result = await db.execute(select(ProxySettings).where(ProxySettings.id == int(proxy_id)))
            proxy_obj = result.scalars().first()
        if proxy_obj:
            proxy = (
                'socks5',
                proxy_obj.proxy_host,
                int(proxy_obj.proxy_port),
                True if proxy_obj.proxy_login else False,
                str(proxy_obj.proxy_login or ''),
                str(proxy_obj.proxy_password or '')
            )

    client = TelegramClient(StringSession(session_str), api_id, api_hash, proxy=proxy)
    await client.connect()
    try:
        await client.sign_in(password=password)
        me = await client.get_me()

        session_filename = f"{phone.replace('+', '')}.session"
        full_path = os.path.join(UPLOAD_PATH, session_filename)
        with open(full_path, "wb") as f:
            f.write(client.session.save().encode())

        async for db in get_db():
            db.add(TelegramSession(
                user_id=message.from_user.id,
                phone=phone,
                session_file=session_filename,
                api_id=api_id,
                api_hash=api_hash,
                proxy_id=int(proxy_id) if proxy_id and proxy_id != "–Ω–µ—Ç" else None
            ))
            await db.commit()

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        await disconnect()
        await state.clear()



# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ FSM ---
@router.callback_query(F.data.startswith("proxy_select:"))
async def select_proxy(callback: types.CallbackQuery, state: FSMContext):
    proxy_id = callback.data.split(":")[1]
    await state.update_data(proxy=proxy_id)
    await callback.message.edit_text("–ü—Ä–æ–∫—Å–∏ –≤—ã–±—Ä–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    await ask_code(callback.message, state)
    await callback.answer()

async def connect_session(session: TelegramSession, db):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–∫—Å–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)"""
    proxy = None

    if session.proxy_id:
        proxy_data = await db.execute(
            select(ProxySettings).where(ProxySettings.id == session.proxy_id)
        )
        proxy_obj = proxy_data.scalars().first()

        if proxy_obj and proxy_obj.proxy_type.lower() == "socks5":
            proxy = (
                'socks5',
                proxy_obj.proxy_host,
                int(proxy_obj.proxy_port),
                True if proxy_obj.proxy_login else False,
                str(proxy_obj.proxy_login or ''),
                str(proxy_obj.proxy_password or '')
            )
        else:
            print("‚ùå –¢–æ–ª—å–∫–æ SOCKS5 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return None

    print(f"[DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")

    try:
        client = TelegramClient(session.session_file, session.api_id, session.api_hash, proxy=proxy)
        await client.connect()
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
            await client.disconnect()
            return None
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {me.username or me.first_name}")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {e}")
        return None


    try:
        client = TelegramClient(session.session_file, session.api_id, session.api_hash, proxy=proxy)
        await client.connect()
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
            await client.disconnect()
            return None
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {me.username or me.first_name}")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {type(e).__name__}: {e}")
        return None


@router.callback_query(lambda c: c.data.startswith("apply_proxy_to_session:"))
async def apply_proxy_to_session(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏.
    –§–æ—Ä–º–∞—Ç callback_data: apply_proxy_to_session:<session_file>:<proxy_id>
    """
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    session_file, proxy_id = parts[1], int(parts[2])
    
    async for db in get_db():
        result = await db.execute(
            select(TelegramSession).where(
                TelegramSession.user_id == callback.from_user.id,
                TelegramSession.session_file == session_file
            )
        )
        session = result.scalars().first()
        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        result = await db.execute(
            select(ProxySettings).where(ProxySettings.id == proxy_id)
        )
        proxy_obj = result.scalars().first()
        if not proxy_obj:
            await callback.answer("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        proxy = (
            'socks5',
            proxy_obj.proxy_host,
            int(proxy_obj.proxy_port),
            True if proxy_obj.proxy_login else False,
            str(proxy_obj.proxy_login or ''),
            str(proxy_obj.proxy_password or '')
        )
        
        if not await test_proxy(proxy):
            await callback.message.edit_text("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            await callback.answer()
            return

        session.proxy_id = proxy_id
        await db.commit()
        
        client = await connect_session(session, db)
        if client:
            await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–∫—Å–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω –∏ —Å–µ—Å—Å–∏—è {session_file} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_file}.")
    
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("session_remove_proxy:"))
async def session_remove_proxy(callback: types.CallbackQuery, state: FSMContext):
    """
    –°–Ω—è—Ç–∏–µ –ø—Ä–æ–∫—Å–∏ —Å —Å–µ—Å—Å–∏–∏.
    –§–æ—Ä–º–∞—Ç callback_data: session_remove_proxy:<session_file>
    """
    session_file = callback.data.split(":")[1]
    async for db in get_db():
        result = await db.execute(
            select(TelegramSession).where(
                TelegramSession.user_id == callback.from_user.id,
                TelegramSession.session_file == session_file
            )
        )
        session = result.scalars().first()
        if not session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        session.proxy_id = None
        await db.commit()
    await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–Ω—è—Ç —Å —Å–µ—Å—Å–∏–∏ {session_file}.")
    await callback.answer()

# --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ FSM ---

@router.message(F.text == "üîå –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
async def choose_proxy_for_new_session(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ FSM ‚Äì –∞–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    async for db in get_db():
        result = await db.execute(select(ProxySettings).where(ProxySettings.user_id == message.from_user.id))
        proxies = result.scalars().all()
    if not proxies:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for proxy in proxies:
        auth = f"{proxy.proxy_login}:{proxy.proxy_password}@" if proxy.proxy_login else ""
        button_text = f"{proxy.proxy_type}://{auth}{proxy.proxy_host}:{proxy.proxy_port}"
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"select_proxy:{proxy.id}")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –Ω–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("select_proxy:"))
async def select_proxy_callback(callback: types.CallbackQuery, state: FSMContext):
    proxy_id = int(callback.data.split(":")[1])
    await state.update_data(proxy_id=proxy_id)
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–∫—Å–∏ –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏.")
    await callback.answer()

@router.message(F.text == "‚ùå –°–Ω—è—Ç—å –ø—Ä–æ–∫—Å–∏")
async def remove_proxy_for_new_session(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if "proxy_id" in data:
        await state.update_data(proxy_id=None)
        await message.answer("‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–Ω—è—Ç. –ù–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏.", reply_markup=session_keyboard)
    else:
        await message.answer("‚Ñπ –ü—Ä–æ–∫—Å–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=session_keyboard)