from aiogram import Router, types, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import os
import random
from datetime import datetime
from telethon import TelegramClient, functions, types as ttypes
from db.sessions import get_db
from db.models import TelegramSession, Flow
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
import logging
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from db.sessions import async_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
router = Router()

# –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
SESSIONS_PATH = "sessions/"

# ================================
# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
# ================================
async def keep_online(session):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏ Telethon, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–Ω–∞—á–∞–ª–∞ –≤ offline, –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –≤ online,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ "–û—Å—Ç–∞–≤–∞–π—Å—è –æ–Ω–ª–∞–π–Ω".
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Å—Å–∏–π —Å is_active == True.
    """
    session_file_path = os.path.join(SESSIONS_PATH, session.session_file)
    if not os.path.exists(session_file_path):
        print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file_path}")
        return

    client = TelegramClient(session_file_path, session.api_id, session.api_hash)
    try:
        await client.connect()
        if await client.is_user_authorized():
            await client(functions.account.UpdateStatusRequest(offline=True))
            await asyncio.sleep(1)
            await client(functions.account.UpdateStatusRequest(offline=False))
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ
            await client.send_message("me", "–û—Å—Ç–∞–≤–∞–π—Å—è –æ–Ω–ª–∞–π–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ keep_online –¥–ª—è —Å–µ—Å—Å–∏–∏ {session.id}: {e}")
    finally:
        if client.is_connected():
            await client.disconnect()

# ================================
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
# ================================
class PollingStates(StatesGroup):
    main_menu = State()
    waiting_for_activity = State()
    selecting = State()
    waiting_for_save = State()

class FlowCreationStates(StatesGroup):
    waiting_for_sessions_count = State()
    waiting_for_sessions_selection = State()
    stop_poll = State()

# ================================
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
# ================================
def get_menu_keyboard1():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫")],
            [types.KeyboardButton(text="üìå –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π")],
            [types.KeyboardButton(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")],
            [types.KeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥")],
            [types.KeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥")],
            [types.KeyboardButton(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë• –°–µ—Å—Å–∏–∏")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É"), KeyboardButton(text="üö´ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")],
        [KeyboardButton(text="üì¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), KeyboardButton(text="üì® –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), KeyboardButton(text="üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")]
    ],
    resize_keyboard=True
)

@router.message(F.text=="üîô –ù–∞–∑–∞–¥")
async def back_to_main_from_subscription(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)

# ================================
# –§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
# ================================
async def get_sessions_page(user_id: int, page: int, page_size: int = 2):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—ã–π page_size –ø–æ –≤—Å–µ–º –≤—ã–∑–æ–≤–∞–º.
    """
    offset = page * page_size
    async with async_session() as session:
        result = await session.execute(
            select(TelegramSession)
            .where(TelegramSession.user_id == user_id)
            .offset(offset)
            .limit(page_size)
        )
        sessions = result.scalars().all()
        logger.info(f"get_sessions_page: offset={offset}, limit={page_size}, –Ω–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π")
        return sessions

# ================================
# –•–µ–Ω–¥–ª–µ—Ä: –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π
# ================================
@router.message(F.text == "üìå –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π")
async def show_sessions_status(message: types.Message, state: FSMContext):
    await state.update_data(page=0)
    await send_sessions_page(message, state, page=0)

async def send_sessions_page(message: types.Message, state: FSMContext, page: int = 0):
    async for db in get_db():
        sessions_result = await db.execute(
            select(TelegramSession).where(TelegramSession.user_id == message.from_user.id)
        )
        sessions = sessions_result.scalars().all()
    
    if not sessions:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=get_menu_keyboard1())
        return

    sessions_per_page = 2
    total_sessions = len(sessions)
    max_page = (total_sessions - 1) // sessions_per_page
    
    page = max(0, min(page, max_page))
    start = page * sessions_per_page
    end = start + sessions_per_page
    paginated_sessions = sessions[start:end]
    
    text = "\ud83d\udccc –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π:\n\n"
    for session in paginated_sessions:
        session_file_path = os.path.join(SESSIONS_PATH, session.session_file)
        status = "\ud83d\udfe2 –ê–∫—Ç–∏–≤–Ω–∞" if os.path.exists(session_file_path) else "\ud83d\udd34 –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        text += f"ID: {session.id} | {status}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page:{page - 1}"))
    if page < max_page:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"next_page:{page + 1}"))
    
    if buttons:
        keyboard.inline_keyboard.append(buttons)
    
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="session_menu_back")]
    )
    
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("prev_page:"))
async def previous_page_handler(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split(":")[1])
    await callback_query.message.delete()
    await send_sessions_page(callback_query.message, state, page)

@router.callback_query(F.data.startswith("next_page:"))
async def next_page_handler(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split(":")[1])
    await callback_query.message.delete()
    await send_sessions_page(callback_query.message, state, page)

@router.callback_query(F.data == "session_menu_back")
async def back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await callback_query.message.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_menu_keyboard1())

@router.message(F.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥")
async def start_stop_polling(message: types.Message, state: FSMContext):
    streams = await get_session_status()  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    
    if not streams:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ—Ç–æ–∫ #{stream['id']}", callback_data=f"stop_stream:{stream['id']}")]
            for stream in streams
        ]
    )
    
    await state.set_state(FlowCreationStates.stop_poll)
    await message.answer("üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("stop_stream:"))
async def stop_stream_callback(callback: types.CallbackQuery, state: FSMContext):
    stream_id = int(callback.data.split(":")[1])
    success = await stop_stream(stream_id)  # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫
    
    if success:
        await callback.message.edit_text(f"‚úÖ –ü–æ—Ç–æ–∫ #{stream_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫.", show_alert=True)
    
    await state.clear()
    await callback.answer()

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫")
async def start_flow_creation(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≤ –ø–æ—Ç–æ–∫–µ.
    """
    async for db in get_db():
        result = await db.execute(
            select(TelegramSession).where(TelegramSession.user_id == message.from_user.id)
        )
        sessions = result.scalars().all()
        total_sessions = len(sessions)

    if total_sessions == 0:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=get_menu_keyboard1())
        return

    await state.set_state(FlowCreationStates.waiting_for_sessions_count)
    await message.answer(
        f"–£ –≤–∞—Å {total_sessions} —Å–µ—Å—Å–∏–π. –°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø–æ—Ç–æ–∫–µ?",
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.message(FlowCreationStates.waiting_for_sessions_count)
async def set_sessions_count(message: types.Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –ø–æ—Ç–æ–∫–µ, —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–µ.
    """
    input_text = message.text.strip()
    try:
        sessions_count = int(input_text)
        if sessions_count <= 0:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏ –±–æ–ª—å—à–µ 0). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    async for db in get_db():
        result = await db.execute(
            select(TelegramSession).where(TelegramSession.user_id == message.from_user.id)
        )
        sessions = result.scalars().all()

        if len(sessions) < sessions_count:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Å—Å–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(sessions)}.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
        selected_sessions = random.sample(sessions, sessions_count)
        for session in selected_sessions:
            session.is_active = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        await db.commit()

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        flow_name = f"Flow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        new_flow = Flow(name=flow_name, user_id=message.from_user.id, sessions=selected_sessions)
        db.add(new_flow)
        await db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫–µ:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ selected_flows
        await state.update_data(selected_flows=[new_flow.id])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(PollingStates.main_menu)

        await message.answer(
            f"‚úÖ –ü–æ—Ç–æ–∫ '{flow_name}' —Å–æ–∑–¥–∞–Ω —Å {sessions_count} —Å–µ—Å—Å–∏—è–º–∏ –∏ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏!",
            reply_markup=get_menu_keyboard1()
        )

@router.message(PollingStates.waiting_for_save, F.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
async def save_flow_settings(message: types.Message, state: FSMContext):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.
    """
    data = await state.get_data()
    selected_sessions_ids = data.get("selected_sessions_ids", [])
    flow_name = f"Flow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

    async for db in get_db():
        result = await db.execute(
            select(TelegramSession).where(TelegramSession.id.in_(selected_sessions_ids))
        )
        selected_sessions = result.scalars().all()
        new_flow = Flow(name=flow_name, user_id=message.from_user.id, sessions=selected_sessions)
        db.add(new_flow)
        await db.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ü–æ—Ç–æ–∫ '{flow_name}' —Å–æ–∑–¥–∞–Ω!", reply_markup=get_menu_keyboard1())

@router.message(PollingStates.waiting_for_save, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_flow_creation(message: types.Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞.
    """
    await state.clear()
    await message.answer("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_menu_keyboard1())

@router.callback_query(F.data.startswith("select_session_"))
async def select_session(callback: CallbackQuery, state: FSMContext):
    session_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected_sessions_ids = data.get("selected_sessions_ids", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
    if session_id not in selected_sessions_ids:
        selected_sessions_ids.append(session_id)
        await state.update_data(selected_sessions_ids=selected_sessions_ids)

    sessions_count = data.get("sessions_count", 0)
    if sessions_count == 0:
        await callback.answer("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Å—Å–∏–π, —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫
    if len(selected_sessions_ids) == sessions_count:
        async for db in get_db():
            sessions_result = await db.execute(
                select(TelegramSession).where(TelegramSession.user_id == callback.from_user.id)
            )
            sessions = sessions_result.scalars().all()
            
            selected_sessions = [session for session in sessions if session.id in selected_sessions_ids]
            flow_name = f"Flow_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            new_flow = Flow(name=flow_name, user_id=callback.from_user.id, sessions=selected_sessions)
            db.add(new_flow)
            await db.commit()

        await callback.message.answer(f"‚úÖ –ü–æ—Ç–æ–∫ '{flow_name}' —Å–æ–∑–¥–∞–Ω —Å {len(selected_sessions)} —Å–µ—Å—Å–∏—è–º–∏!", reply_markup=get_menu_keyboard1())
        await state.clear()
        return

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {len(selected_sessions_ids)} –∏–∑ {sessions_count} —Å–µ—Å—Å–∏–π.")
    await callback.answer()

# ================================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
# ================================
@router.message(F.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
async def set_activity_time(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM.
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-18:00):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(PollingStates.waiting_for_activity)

@router.message(PollingStates.waiting_for_activity)
async def process_activity_time(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    try:
        active_time = message.text.strip()
        start_time, end_time = active_time.split("-")
        start_hour, start_minute = map(int, start_time.split(":"))
        end_hour, end_minute = map(int, end_time.split(":"))
        if not (0 <= start_hour < 24 and 0 <= start_minute < 60 and 0 <= end_hour < 24 and 0 <= end_minute < 60):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        
        await state.update_data(active_start=(start_hour, start_minute), active_end=(end_hour, end_minute))
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Å {start_time} –¥–æ {end_time}",
            reply_markup=get_menu_keyboard1()
        )
        await state.set_state(PollingStates.main_menu)
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-18:00)."
        )

# ================================
# –§—É–Ω–∫—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª–ª–∏–Ω–≥–∞
# ================================
async def infinite_polling(active_start, active_end, sessions, message):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ —Å is_active == True –≤—ã–∑—ã–≤–∞–µ—Ç keep_online.
    """
    while True:
        now = datetime.now()
        start_dt = now.replace(hour=active_start[0], minute=active_start[1], second=0, microsecond=0)
        end_dt = now.replace(hour=active_end[0], minute=active_end[1], second=0, microsecond=0)
        
        if end_dt <= start_dt:
            if now < start_dt:
                pass
            else:
                end_dt = end_dt.replace(day=now.day + 1)
        
        if start_dt <= now <= end_dt:
            for session in sessions:
                if session.is_active:
                    asyncio.create_task(keep_online(session))
            await asyncio.sleep(60)
        else:
            if now < start_dt:
                delay = (start_dt - now).total_seconds()
            else:
                next_start = start_dt.replace(day=now.day + 1)
                delay = (next_start - now).total_seconds()
            await asyncio.sleep(delay)

# ================================
# –ü–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
# ================================
@router.message(F.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥")
async def start_polling(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
    """
    data = await state.get_data()
    selected_flow_id = data.get("selected_flow_id")

    async for db in get_db():
        keyboard = get_menu_keyboard1()
        if not keyboard:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.")
            return

        if not selected_flow_id:
            await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª–ª–∏–Ω–≥–∞:", reply_markup=keyboard)
            return

        result = await db.execute(
            select(Flow)
            .options(joinedload(Flow.sessions))
            .where(Flow.id == selected_flow_id)
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º unique() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å joined eager load
        flow = result.unique().scalars().first()

        if not flow or not flow.sessions:
            await message.answer("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç —Å–µ—Å—Å–∏–π.")
            return

        active_start = data.get("active_start")
        active_end = data.get("active_end")
        if not active_start or not active_end:
            await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚è∞.")
            return

        # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Å—Å–∏–π —Å is_active == True)
        task = asyncio.create_task(infinite_polling(active_start, active_end, flow.sessions, message))
        await state.update_data(polling_task=task)
        await message.answer("‚úÖ –ü–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.")

@router.message(F.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥")
async def start_global_polling(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–µ—Å—Å–∏–π) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.
    """
    data = await state.get_data()
    async for db in get_db():
        result = await db.execute(
            select(Flow)
            .options(joinedload(Flow.sessions))
            .where(Flow.user_id == message.from_user.id)
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º unique() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        flows = result.unique().scalars().all()

    if not flows:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.")
        return

    all_sessions = []
    for flow in flows:
        if flow.sessions:
            all_sessions.extend(flow.sessions)
    if not all_sessions:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–∞—Ö.")
        return

    active_start = data.get("active_start")
    active_end = data.get("active_end")
    if not active_start or not active_end:
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚è∞.")
        return

    # –ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Å—Å–∏–π —Å is_active == True)
    task = asyncio.create_task(infinite_polling(active_start, active_end, all_sessions, message))
    await state.update_data(global_polling_task=task)
    await message.answer("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")

@router.callback_query(F.data.startswith("select_flow_"))
async def process_flow_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–ª–ª–∏–Ω–≥–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    """
    flow_id = int(callback.data.split("_")[2])
    async for db in get_db():
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            select(Flow).where(Flow.user_id == callback.from_user.id).execution_options(synchronize_session="fetch")
        )
        flows = await db.execute(select(Flow).where(Flow.user_id == callback.from_user.id))
        for flow in flows.scalars().all():
            flow.is_active = False

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
        result = await db.execute(select(Flow).where(Flow.id == flow_id))
        flow = result.unique().scalars().first()
        if not flow:
            await callback.message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        flow.is_active = True
        await db.commit()
        await state.update_data(selected_flow_id=flow_id)
        
        await callback.message.answer(
            f"‚úÖ –ü–æ—Ç–æ–∫ '{flow.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–ª–∏–Ω–≥–µ."
        )
        await callback.answer()

async def start_multi_polling(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    """
    data = await state.get_data()
    selected_flows = data.get("selected_flows", [])

    if not selected_flows:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ç–æ–∫!", show_alert=True)
        return

    async for db in get_db():
        flows_result = await db.execute(
            select(Flow)
            .options(joinedload(Flow.sessions))
            .where(Flow.id.in_(selected_flows))
        )
        flows = flows_result.unique().scalars().all()

    if not flows:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏.")
        return

    active_start = data.get("active_start")
    active_end = data.get("active_end")

    if not active_start or not active_end:
        await callback.message.answer("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
        return

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for flow in flows:
        asyncio.create_task(infinite_polling(active_start, active_end, flow.sessions, callback.message))

    await callback.message.answer(f"‚úÖ –ü–æ–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(flows)} –ø–æ—Ç–æ–∫–æ–≤!", reply_markup=get_menu_keyboard1())
    await state.clear()

async def infinite_polling_for_flow(flow, active_start, active_end):
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
    –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤—Ö–æ–¥–∏—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è keep_online.
    """
    while True:
        now = datetime.now()
        start_dt = now.replace(hour=active_start[0], minute=active_start[1], second=0, microsecond=0)
        end_dt = now.replace(hour=active_end[0], minute=active_end[1], second=0, microsecond=0)

        if end_dt <= start_dt:
            if now < start_dt:
                pass
            else:
                end_dt = end_dt.replace(day=now.day + 1)

        if start_dt <= now <= end_dt:
            for session in flow.sessions:
                if session.is_active:
                    asyncio.create_task(keep_online(session))
            await asyncio.sleep(60)
        else:
            if now < start_dt:
                delay = (start_dt - now).total_seconds()
            else:
                next_start = start_dt.replace(day=now.day + 1)
                delay = (next_start - now).total_seconds()
            await asyncio.sleep(delay)
