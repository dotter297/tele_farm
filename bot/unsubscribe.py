import os
import re
import asyncio
from aiogram import Router, types
from telethon import TelegramClient
from telethon.errors import (
    FloodWaitError, UserNotParticipantError, UserBannedInChannelError,
    AuthKeyUnregisteredError, ChatWriteForbiddenError, ChannelPrivateError
)
from telethon.tl.functions.channels import LeaveChannelRequest, GetParticipantRequest
from telethon.tl.functions.messages import CheckChatInviteRequest
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from db.sessions import get_db
from db.models import TelegramSession
from bot.logger import logger

router = Router()
SESSIONS_PATH = "sessions/"

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç +invite_link)
VALID_LINK_REGEX = re.compile(r"https://t\.me/[\w+]+")

def extract_link(message: types.Message):
    """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ """
    link = None
    if message.text:
        link = message.text.strip()
    elif message.reply_to_message and message.reply_to_message.text:
        link = message.reply_to_message.text.strip()
    elif message.entities:
        for entity in message.entities:
            if entity.type == "url":
                link = message.text[entity.offset:entity.offset + entity.length]
    if link:
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä ?start=...
        link = re.sub(r"\?.*", "", link)
    return link if link and VALID_LINK_REGEX.match(link) else None

async def unsubscribe_group(message: types.Message, count, interval, randomize, random_range, group_link):
    """
    –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π.
    """
    await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø–∏—Å–∫—É {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç {group_link}...")
    successful_unsubs = 0
    failed_unsubs = 0

    async for db in get_db():
        sessions_result = await db.execute(select(TelegramSession))
        sessions = sessions_result.scalars().all()

        if not sessions:
            await message.answer("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.")
            return

        for session in sessions:
            if successful_unsubs >= count:
                break  # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø–∏—Å–æ–∫

            try:
                session_file_path = os.path.join(SESSIONS_PATH, session.session_file)
                if not os.path.exists(session_file_path):
                    failed_unsubs += 1
                    await message.answer(f"üö´ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ `{session.session_file}` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                client = TelegramClient(session_file_path, session.api_id, session.api_hash)
                await client.connect()

                if not await client.is_user_authorized():
                    try:
                        logger.warning(f"üîÑ –ê–∫–∫–∞—É–Ω—Ç {session.user_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                        await client.start()
                    except AuthKeyUnregisteredError:
                        failed_unsubs += 1
                        await db.execute(
                            TelegramSession.__table__.delete().where(TelegramSession.user_id == session.user_id)
                        )
                        await db.commit()
                        await message.answer(f"üö´ –°–µ—Å—Å–∏—è `{session.session_file}` —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã.")
                        await client.disconnect()
                        continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
                try:
                    await client(LeaveChannelRequest(group_link))
                    successful_unsubs += 1
                    user = await client.get_me()
                    username = user.username if user.username else user.first_name
                    await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç **{username}** –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {group_link}.")
                except UserNotParticipantError:
                    await message.answer(f"‚Ñπ –ê–∫–∫–∞—É–Ω—Ç {session.user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ {group_link}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                except Exception as e:
                    failed_unsubs += 1
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞ {session.user_id}: {e}")
                finally:
                    await client.disconnect()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø–∏—Å–∫–æ–π
                if successful_unsubs < count:
                    sleep_time = interval
                    if randomize:
                        sleep_time += random.randint(-random_range, random_range)
                        sleep_time = max(sleep_time, 0)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                    await asyncio.sleep(sleep_time)

            except Exception as e:
                failed_unsubs += 1
                await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

    await message.answer(
        f"üìä –û—Ç–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_unsubs}\n‚ùå –û—à–∏–±–∫–∏: {failed_unsubs}"
    )


async def show_unsubscribe_info(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç extract_link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏ –∑–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –æ–Ω –≤ –≥—Ä—É–ø–ø–µ. –ï—Å–ª–∏ –¥–∞ ‚Äì —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫.
    """
    group_link = extract_link(message)
    if not group_link:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ **–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é** —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø–∏—Å–∫–∏."
        )
        return

    async for db in get_db():
        sessions_result = await db.execute(select(TelegramSession))
        sessions = sessions_result.scalars().all()

        if not sessions:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø–∏—Å–∫–∏.")
            return

        unsubscribable = 0
        for session in sessions:
            try:
                session_file_path = os.path.join(SESSIONS_PATH, session.session_file)
                if not os.path.exists(session_file_path):
                    continue

                client = TelegramClient(session_file_path, session.api_id, session.api_hash)
                await client.connect()

                if not await client.is_user_authorized():
                    await client.disconnect()
                    continue

                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                await client(GetParticipantRequest(group_link, 'me'))
                unsubscribable += 1
                await client.disconnect()

            except Exception:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ) ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue

        await message.answer(f"üë• –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏: {unsubscribable} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
